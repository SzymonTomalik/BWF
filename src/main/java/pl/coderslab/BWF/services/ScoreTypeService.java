package pl.coderslab.BWF.services;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import pl.coderslab.BWF.converter.DateConverter;import pl.coderslab.BWF.entity.ScoreType;import pl.coderslab.BWF.entity.SoccerMatch;import pl.coderslab.BWF.entity.User;import pl.coderslab.BWF.repository.ScoreTypeRepository;import pl.coderslab.BWF.repository.SoccerMatchRepository;@Service@Slf4j@RequiredArgsConstructorpublic class ScoreTypeService {    private final ScoreTypeRepository scoreTypeRepository;    private final SoccerMatchRepository soccerMatchRepository;    private final MatchService matchService;    public void addScoreTypeToBase(ScoreType scoreType){        scoreTypeRepository.save(scoreType);    }    private void countBetPoint(ScoreType scoreType, SoccerMatch soccerMatch) {        if (scoreType.getTypedHomeTeamResult() == soccerMatch.getHomeTeamScore() && scoreType.getTypedAwayTeamResult() == soccerMatch.getAwayTeamScore()) {            scoreType.setPoints(scoreType.getPoints()+3);        }        if(scoreType.getTypedHomeTeamResult()>scoreType.getTypedAwayTeamResult() && soccerMatch.getHomeTeamScore()>soccerMatch.getAwayTeamScore()){            scoreType.setPoints(scoreType.getPoints()+1);        }        if(scoreType.getTypedHomeTeamResult()<scoreType.getTypedAwayTeamResult() && soccerMatch.getHomeTeamScore()<soccerMatch.getAwayTeamScore()){            scoreType.setPoints(scoreType.getPoints()+1);        }        if(scoreType.getTypedHomeTeamResult()==scoreType.getTypedAwayTeamResult() && soccerMatch.getHomeTeamScore()==soccerMatch.getAwayTeamScore() && scoreType.getTypedHomeTeamResult()!=soccerMatch.getHomeTeamScore()){            scoreType.setPoints(scoreType.getPoints()+1);        }    }    public boolean isTypeChangeable(ScoreType scoreType) {        SoccerMatch soccerMatch= soccerMatchRepository.getOne(scoreType.getSoccerMatchId());        return matchService.canBeBet(soccerMatch) && scoreType.getChangedDate().equals(scoreType.getCreatedDate());    }    public boolean isAlreadyTyped(long userId, long betGroupId,ScoreType scoreType){        return scoreTypeRepository.findAllByUserIdAndUserBetGroup(userId, betGroupId).contains(scoreType);    }    public ScoreType getScoreType(Long userAccountId, Long soccerMatchId) {        return scoreTypeRepository.findByUserAccountIdAndSoccerMatchId(userAccountId, soccerMatchId);    }    public void editScoreType(ScoreType scoreType){        ScoreType scoreTypeToEdit = getScoreType(scoreType.getUserAccount().getId(), scoreType.getSoccerMatch().getId());        scoreTypeToEdit.setTypedHomeTeamResult(scoreType.getTypedHomeTeamResult());        scoreTypeToEdit.setTypedAwayTeamResult(scoreType.getTypedAwayTeamResult());        scoreTypeToEdit.setChangedDate(DateConverter.getDateNow());        addScoreTypeToBase(scoreTypeToEdit);        log.info("Type " +scoreTypeToEdit.toString() + " was edited in the base");    }}